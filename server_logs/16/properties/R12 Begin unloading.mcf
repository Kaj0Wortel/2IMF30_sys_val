
exists c: Nat . val(c < 4) &&
exists r: Nat . val(r < 3) &&
exists anyR: Rail . val(id(anyR) <= 8) &&
exists allRail: Rail . val(id(allRail) <= 8) &&
	[true* . (cartFull(c) . (!cartFull(c) && !cartEmpty(c))* . cartEmpty(c) . (!cartFull(c) && !cartEmpty(c))*)* .
		cartAtRail(c, get_refinery_rail(r)) . (!cartFull(c) && !cartEmpty(c) && !cartAtRail(c, anyR))*]
	<(!cartFull(c) && !cartEmpty(c) && !cartAtRail(c, anyR))* . unloadCart(c, true)> false

%forall c: Nat . val(c < 4) =>
%forall r: Nat . val(r < 3) =>
%forall refRail: Rail . val(id(refRail) <= 8 && is_at_refinery(refRail)) =>
%forall allRail: Rail . val(id(allRail) <= 8) =>
%	[true*][requestIron(r)]
%	[(!cartAtRail(c, allRail) && !requestIron(r) && !requestIron(r) && !unloadCart(c, true))*]
%	<(!cartAtRail(c, allRail) && !requestIron(r) && !requestIron(r) && !unloadCart(c, true))*>
%	<cartAtRail(c, refRail)>
%	<(!cartAtRail(c, allRail) && !requestIron(r) && !requestIron(r) && !unloadCart(c, true))*>
%	<unloadCart(c, true)> true


%nu X(CartLocation: Nat -> Nat = cartInit, OpenRequests: List(Nat) = [], RefineryAt: Nat -> Nat = refineryInit) . 
%	( forall c: Nat . val(c < 4) => forall r: Nat . val(r < 3) => [cartAtRail(c, rail(r))] ( X(CartLocation[c -> r], OpenRequests, RefineryAt) ) ) &&
%	( forall r: Nat . val(r < 3) => [requestIron(r)]( X(CartLocation, add(OpenRequests, r), RefineryAt) ) ) &&
%	( forall r: Nat . val(r < 3) => [requestDone(r)] ( X(CartLocation, remove(OpenRequests, r), RefineryAt) ) ) &&
%	( forall c: Nat . val(c < 4) => [unloadCart(c, true)] ( exists r: Nat . val(r < 3 && CartLocation(c) == RefineryAt(r)
%		&& inList(OpenRequests, RefineryAt(r))) && X(CartLocation, OpenRequests, RefineryAt) ) ) && 
%	( forall n: Nat . (val(n < 4) => forall ra: Nat . val(ra < 8) => forall re: Nat . val(re < 3) => forall c: Nat . val(c < 4) =>
%		[!cartAtRail(n, rail(ra)) && !requestIron(re) && !requestDone(re) && !unloadCart(c, true)] ( X(CartLocation, OpenRequests, RefineryAt)) ) )
