nu X(needsMain: FSet(Nat) = {}, isAtBay: FSet(Nat) = {0}) .
	( forall c: Nat . val(c < 4) => [cartRequestMaintenance(c)] (val(!(c in needsMain)) && X(needsMain + {c}, isAtBay)) ) &&
	( forall c: Nat . val(c < 4) => forall r: Rail . val(id(r) <= 8) => [cartAtRail(c, r)] (
		(val( is_at_repair_bay(r)) => X(needsMain, isAtBay + {c})) &&
		(val(!is_at_repair_bay(r)) => X(needsMain, isAtBay - {c}))
	)) &&
	( forall c: Nat . val(c < 4) => [cartUp(c)] X(needsMain - {c}, isAtBay) ) &&
	( forall c: Nat . val(c < 4) => [requestCartMaintenance(c)] (val(c in isAtBay && c in needsMain) && X(needsMain - {c}, isAtBay)) ) &&
	( forall c: Nat . val(c < 4) => forall r: Rail . val(id(r) <= 8) =>
		[!cartRequestMaintenance(c) && !cartAtRail(c, r) && !cartUp(c) && !requestCartMaintenance(c)]
			X(needsMain, isAtBay))