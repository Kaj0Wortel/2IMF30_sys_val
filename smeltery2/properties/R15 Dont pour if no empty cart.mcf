nu X(isFull: FSet(Nat) = {}, isAtFurnace: FSet(Nat) = {}) .
	( forall c: Nat . val(c < 4) => [cartAtRail(c, get_furnace_rail)] X(isFull, isAtFurnace + {c}) ) &&
	( forall c: Nat . val(c < 4) => forall r: Rail . val(id(r) <= 8) => [cartAtRail(c, r)] (
		(val( is_at_furnace(r)) => X(isFull, isAtFurnace + {c})) &&
		(val(!is_at_furnace(r)) => X(isFull, isAtFurnace - {c}))
	)) &&
	( forall c: Nat . val(c < 4) => [cartFull(c)] X(isFull + {c}, isAtFurnace) ) &&
	( forall c: Nat . val(c < 4) => [cartEmpty(c)] X(isFull - {c}, isAtFurnace) ) &&
	( [pourFurnace(true)] ( exists c: Nat . val(c < 4 && c in isAtFurnace && !(c in isFull)) ) ) &&
	( forall c: Nat . val(c < 4) => forall r: Rail . val(id(r) <= 8) =>
		[!cartAtRail(c, r) && !cartFull(c) && !cartEmpty(c)] X(isFull, isAtFurnace) )