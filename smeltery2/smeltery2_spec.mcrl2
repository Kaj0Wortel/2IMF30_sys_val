

sort Rail = struct rail(id: Nat);
sort Ref = struct ref(rs0: Nat, rs1: Nat, rs2: Nat, res0: Nat, res1: Nat, res2: Nat, cart0: Nat, cart1: Nat, cart2: Nat);
sort Cart = struct cart(id: Nat, railSgm: Rail, empty: Bool, down: Bool, req_main: Bool, rec_main: Bool);
sort CartState = struct cartState(cart0: Cart, cart1: Cart, cart2: Cart, cart3: Cart);

map
	init_ref_state: Ref;
	get_state: Nat # Ref -> Nat;
	set_state: Nat # Nat # Ref -> Ref;
	get_error_state: Nat # Ref -> Nat;
	set_error_state: Nat # Nat # Ref -> Ref;
	get_cart: Nat # Ref -> Nat;
	set_cart: Nat # Nat # Ref -> Ref;
	
	init_cart: Nat # Nat -> Cart;
	get_id: Cart -> Nat;
	get_rail: Cart -> Rail;
	set_rail: Rail # Cart -> Cart;
	is_empty: Cart -> Bool;
	set_empty: Bool # Cart -> Cart;
	is_down: Cart -> Bool;
	set_down: Bool # Cart -> Cart;
	get_requires_main: Cart -> Bool;
	set_requires_main: Bool # Cart -> Cart;
	get_receiving_main: Cart -> Bool;
	set_receiving_main: Bool # Cart -> Cart;
	
	init_cart_state: CartState;
	get_cart: Nat # CartState -> Cart;
	set_cart: Nat # Cart # CartState -> CartState;
	is_empty: Nat # CartState -> Bool;
	set_empty: Nat # Bool # CartState -> CartState;
	is_down: Nat # CartState -> Bool;
	set_down: Nat # Bool # CartState -> CartState;
	get_requires_main: Nat # CartState -> Bool;
	set_requires_main: Nat # Bool # CartState -> CartState;
	get_receiving_main: Nat # CartState -> Bool;
	set_receiving_main: Nat # Bool # CartState -> CartState;


var s, s0, s1, s2: Nat;
	r, r0, r1, r2: Nat;
	c, c0, c1, c2: Nat;
eqn
	init_ref_state = ref(0, 0, 0, 0, 0, 0, 0, 0, 0);
	
	get_state(0, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = s0;
	get_state(1, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = s1;
	get_state(2, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = s2;
	set_state(0, s, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s, s1, s2, r0, r1, r2, c0, c1, c2);
	set_state(1, s, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s, s2, r0, r1, r2, c0, c1, c2);
	set_state(2, s, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s, r0, r1, r2, c0, c1, c2);

	get_error_state(0, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = r0;
	get_error_state(1, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = r1;
	get_error_state(2, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = r2;
	set_error_state(0, r, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r, r1, r2, c0, c1, c2);
	set_error_state(1, r, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r, r2, c0, c1, c2);
	set_error_state(2, r, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r, c0, c1, c2);
	
	get_cart(0, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = c0;
	get_cart(1, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = c1;
	get_cart(2, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = c2;
	set_cart(0, c, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r2, c, c1, c2);
	set_cart(1, c, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r2, c0, c, c2);
	set_cart(2, c, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r2, c0, c1, c);
	

var n, n1: Nat;
	r, r1: Rail;
	b, b1, b2, b3, b4: Bool;
eqn
	init_cart(n, n1) = cart(n, rail(n1), true, false, false, false);
	
	get_id(cart(n, r, b1, b2, b3, b4)) = n;
	
	get_rail(cart(n, r1, b1, b2, b3, b4)) = r;
	set_rail(r, cart(n, r1, b1, b2, b3, b4)) = cart(n, r, b1, b2, b3, b4);
	
	is_empty(cart(n, r, b1, b2, b3, b4)) = b1;
	set_empty(b, cart(n, r1, b1, b2, b3, b4)) = cart(n, r1, b, b2, b3, b4);
	
	is_down(cart(n, r, b1, b2, b3, b4)) = b2;
	set_down(b, cart(n, r1, b1, b2, b3, b4)) = cart(n, r1, b1, b, b3, b4);
	
	get_requires_main(cart(n, r, b1, b2, b3, b4)) = b3;
	set_requires_main(b, cart(n, r1, b1, b2, b3, b4)) = cart(n, r1, b1, b2, b, b4);
	
	get_receiving_main(cart(n, r, b1, b2, b3, b4)) = b4;
	set_receiving_main(b, cart(n, r1, b1, b2, b3, b4)) = cart(n, r1, b1, b2, b3, b);


var c, c0, c1, c2, c3: Cart;
	n: Nat;
	b: Bool;
	cs: CartState;
eqn
	init_cart_state = cartState(
			cart(0, rail(0), true, false, false, false),
			cart(1, rail(3), true, false, false, false),
			cart(2, rail(5), true, false, false, false),
			cart(3, rail(7), true, false, false, false)
	);
	
	get_cart(0, cartState(c0, c1, c2, c3)) = c0;
	get_cart(1, cartState(c0, c1, c2, c3)) = c1;
	get_cart(2, cartState(c0, c1, c2, c3)) = c2;
	get_cart(3, cartState(c0, c1, c2, c3)) = c3;
	set_cart(0, c, cartState(c0, c1, c2, c3)) = cartState(c, c1, c2, c3);
	set_cart(1, c, cartState(c0, c1, c2, c3)) = cartState(c0, c, c2, c3);
	set_cart(2, c, cartState(c0, c1, c2, c3)) = cartState(c0, c1, c, c3);
	set_cart(3, c, cartState(c0, c1, c2, c3)) = cartState(c0, c1, c2, c);
	
	is_empty(n, cs) = is_empty(get_cart(n, cs));
	set_empty(n, b, cs) = set_cart(n, set_empty(b, get_cart(n, cs)), cs);
	
	is_down(n, cs) = is_down(get_cart(n, cs));
	set_down(n, b, cs) = set_cart(n, set_down(b, get_cart(n, cs)), cs);

	get_requires_main(n, cs) = get_requires_main(get_cart(n, cs));
	set_requires_main(n, b, cs) = set_cart(n, set_requires_main(b, get_cart(n, cs)), cs);

	get_receiving_main(n, cs) = get_receiving_main(get_cart(n, cs));
	set_receiving_main(n, b, cs) = set_cart(n, set_receiving_main(b, get_cart(n, cs)), cs);


act
	%% Blast furnace.
	% External actions.
	furnaceDown, requestFurnaceMaintenance, furnaceUp;
	cartFull: Nat;
	pourFurnace: Bool;
	% Internal actions.
	fillCart, cartIsFull: Nat;
	
	
	%% Refinery.
	% External actions.
	refineryDown, requestRefineryMaintenance, refineryUp: Nat;
	unloadCart: Nat # Bool;
	cartEmpty: Nat;
	
	% Internal actions.
	pourCart;
	refACart, cartACart, aCart: Nat # Nat;
	refRequestDone, carRequestqDone, requestDone: Nat;
	
	% Internal + external actions.
	refRequestIron, cartRequestIron, requestIron: Nat;
	
	
	%% RequestBuffer
	bufRefRequestIron, bufCartRequestIron, bufDoneRequest, requestIronBuf, cartDoneRequest: Nat;
	
	


proc
	BlastFurnace(fs: Nat, c: Nat) =
			furnaceDown . requestFurnaceMaintenance . furnaceUp . BlastFurnace(fs, c) +
			(fs == 0) -> sum crt: Nat . (crt < 4) -> fillCart(crt) . BlastFurnace(1, crt) +
			(fs == 1) -> pourFurnace(true) . BlastFurnace(2, c) +
			(fs == 2) -> cartFull(c) . BlastFurnace(3, c) +
			(fs == 3) -> pourFurnace(false) . BlastFurnace(4, c) +
			(fs == 4) -> cartIsFull(c) . BlastFurnace(0, c);
	
	Refinery(rs: Ref) =
			sum n: Nat . (n < 3) -> (
				(get_error_state(n, rs) == 0) -> (
					refineryDown(n) . Refinery(set_error_state(n, 1, rs)) +
					(get_state(n, rs) == 0) -> refRequestIron(n) . Refinery(set_state(n, 1, rs)) +
					(get_state(n, rs) == 1) -> refACart(n,  . Refinery(set_state(n, 2, rs)) +
					(get_state(n, rs) == 2) -> unloadCart(n, true) . Refinery(set_state(n, 3, rs)) +
					(get_state(n, rs) == 3) -> cartEmpty(n) . Refinery(set_state(n, 4, rs)) +
					(get_state(n, rs) == 4) -> unloadCart(n, false) . Refinery(set_state(n, 5, rs)) +
					(get_state(n, rs) == 5) -> refRequestDone(n) . Refinery(set_state(n, 0, rs))
				) +
				(get_error_state(n, rs) == 1) -> requestRefineryMaintenance(n) . Refinery(set_error_state(n, 2, rs)) +
				(get_error_state(n, rs) == 2) -> refineryUp(n) . Refinery(set_error_state(n, 0, rs))
			);
	
	RequestBuffer(buf: List(Nat), s: Nat) =
			(s == 0) -> sum r: Nat . (r < 3) -> bufRefRequestIron(r) . RequestBuffer(r |> buf, 1) +
			(s == 1) -> sum r: Nat . (buf <| r) -> bufCartRequest(r) . RequestBuffer(buf, 2) +
			(s == 2) -> sum r: Nat . (buf <| r) -> bufDoneRequest(r) . sum l: List(Nat) . (buf == r |> l) -> RequestBuffer(l, 0);
	
	CartMover(cs: CartState, state: Nat) =
			sum c: Nat . (c < 4) -> (
				cartDown(c) . CartMover(set_cart(c, get_cart(c, cs)), state)
			) + sum r: Nat . (r < 3) -> cartRequestIron(r) . CartMover(r);

init
	allow ({ aCart, requestIron, requestIronBuf, requestDone, unloadCart },
		comm ({
				refACart | cartACart -> aCart,
				refRequestIron | bufRefRequestIron -> requestIron,
				cartRequestIron | bufCartRequestIron -> requestIronBuf,
				cartRequestDone | bufRequestDone -> requestDone
			},
			BlastFurnace(0, 0) || Refinery(init_ref_state) || RequestBuffer(init_buf_state) || CartMover(init_cart_state, 0)
		)
	);





