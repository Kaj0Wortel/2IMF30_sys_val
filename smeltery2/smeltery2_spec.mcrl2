%% Rail structure:
%%              [/3-][-4|]
%% [|0-][-1-][-2+][-5-][-6|]
%%              [\7-][-8|]
%% 
%% Repair bays (bay, rail)          : (0, 0), (1, 4), (2, 6), (3, 8)
%% Blast furnace (rail)             : (1)
%% Refinaries (refinery, rail)      : (0, 3), (1, 5), (2, 7)
%% Rail switch (rail)               : (2)
%% Init cart positions (cart, rail) : (0, 0), (1, 3), (2, 5), (3, 7)

sort Rail = struct rail(id: Nat);
sort Switch = struct switch(pos: Nat);
sort Ref = struct ref(rs0: Nat, rs1: Nat, rs2: Nat, res0: Nat, res1: Nat, res2: Nat, cart0: Nat, cart1: Nat, cart2: Nat);
sort Cart = struct cart(id: Nat, pos: Rail, next: Rail, target: Rail, empty: Bool, down: Bool, req_main: Bool, rec_main: Bool);
sort CartState = struct cartState(cart0: Cart, cart1: Cart, cart2: Cart, cart3: Cart);

map
	% Static functions.
	get_refinery_rail: Nat -> Rail;
	get_refinery_at: Rail -> Nat;
	is_at_refinery: Rail -> Bool;

	get_furnace_rail: Rail;
	is_at_furnace: Rail -> Bool;

	get_repair_bay_rail: Nat -> Rail;
	get_repair_bay_at: Rail -> Nat;
	is_at_repair_bay: Rail -> Bool;
	
	get_id: Rail -> Nat;
	allow_next: Rail # Switch -> Bool;
	next: Rail # Switch -> Rail;
	allow_prev: Rail -> Bool;
	prev: Rail -> Rail;
	
	get_pos: Switch -> Nat;
	
	init_cart: Nat # Nat -> Cart;
	init_cart_state: CartState;
	init_ref_state: Ref;
	
	% Dynamic functions.
	get_state: Nat # Ref -> Nat;
	set_state: Nat # Nat # Ref -> Ref;
	get_error_state: Nat # Ref -> Nat;
	set_error_state: Nat # Nat # Ref -> Ref;
	get_cart: Nat # Ref -> Nat;
	set_cart: Nat # Nat # Ref -> Ref;
	
	get_id: Cart -> Nat;
	get_rail: Cart -> Rail;
	set_rail: Rail # Cart -> Cart;
	get_next_rail: Cart -> Rail;
	set_next_rail: Rail # Cart -> Cart;
	get_target_rail: Cart -> Rail;
	set_target_rail: Rail # Cart-> Cart;
	is_empty: Cart -> Bool;
	set_empty: Bool # Cart -> Cart;
	is_down: Cart -> Bool;
	set_down: Bool # Cart -> Cart;
	get_requires_main: Cart -> Bool;
	set_requires_main: Bool # Cart -> Cart;
	get_receiving_main: Cart -> Bool;
	set_receiving_main: Bool # Cart -> Cart;
	
	get_cart: Nat # CartState -> Cart;
	set_cart: Nat # Cart # CartState -> CartState;
	get_rail: Nat # CartState -> Rail;
	set_rail: Nat # Rail # CartState -> CartState;
	is_empty: Nat # CartState -> Bool;
	set_empty: Nat # Bool # CartState -> CartState;
	is_down: Nat # CartState -> Bool;
	set_down: Nat # Bool # CartState -> CartState;
	get_requires_main: Nat # CartState -> Bool;
	set_requires_main: Nat # Bool # CartState -> CartState;
	get_receiving_main: Nat # CartState -> Bool;
	set_receiving_main: Nat # Bool # CartState -> CartState;


var n: Nat;
	r, r1: Rail;
eqn
	get_refinery_rail(0) = rail(3);
	get_refinery_rail(1) = rail(5);
	get_refinery_rail(2) = rail(7);
	get_refinery_at(rail(3)) = 0;
	get_refinery_at(rail(5)) = 1;
	get_refinery_at(rail(7)) = 2;
	is_at_refinery(r) = exists refID: Nat . (refID < 3 && r == get_refinery_rail(refID));
	
	get_furnace_rail = rail(1);
	is_at_furnace(r) = (r == get_furnace_rail);
	
	get_repair_bay_rail(0) = rail(0);
	get_repair_bay_rail(1) = rail(4);
	get_repair_bay_rail(2) = rail(6);
	get_repair_bay_rail(3) = rail(8);
	get_repair_bay_at(rail(0)) = 0;
	get_repair_bay_at(rail(4)) = 1;
	get_repair_bay_at(rail(6)) = 2;
	get_repair_bay_at(rail(8)) = 3;
	is_at_repair_bay(r) = exists bayID: Nat . (bayID < 4 && r == get_repair_bay_rail(bayID));


var n, s: Nat;
	sw: Switch;
eqn
	get_id(rail(n)) = n;
	
	allow_next(rail(n), switch(s)) = (n <= 3 || n == 5 || n == 7) && (s >= 0 && s <= 2);
	next(rail(2), switch(0)) = rail(3);
	next(rail(2), switch(1)) = rail(5);
	next(rail(2), switch(2)) = rail(7);
	allow_next(rail(n), sw) && n != 2 -> next(rail(n), sw) = rail(n + 1);
	
	allow_prev(rail(n)) = (n >= 1 && n <= 8);
	n == 3 || n == 5 || n == 7 -> prev(rail(n)) = rail(2);
	n != 3 && n != 5 && n != 7 && n != 0 -> prev(rail(n)) = rail(Int2Nat(n - 1));
	
	get_pos(switch(n)) = n;



var s, s0, s1, s2: Nat;
	r, r0, r1, r2: Nat;
	c, c0, c1, c2: Nat;
eqn
	init_ref_state = ref(0, 0, 0, 0, 0, 0, 0, 0, 0);
	
	get_state(0, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = s0;
	get_state(1, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = s1;
	get_state(2, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = s2;
	set_state(0, s, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s, s1, s2, r0, r1, r2, c0, c1, c2);
	set_state(1, s, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s, s2, r0, r1, r2, c0, c1, c2);
	set_state(2, s, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s, r0, r1, r2, c0, c1, c2);

	get_error_state(0, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = r0;
	get_error_state(1, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = r1;
	get_error_state(2, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = r2;
	set_error_state(0, r, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r, r1, r2, c0, c1, c2);
	set_error_state(1, r, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r, r2, c0, c1, c2);
	set_error_state(2, r, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r, c0, c1, c2);
	
	get_cart(0, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = c0;
	get_cart(1, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = c1;
	get_cart(2, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = c2;
	set_cart(0, c, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r2, c, c1, c2);
	set_cart(1, c, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r2, c0, c, c2);
	set_cart(2, c, ref(s0, s1, s2, r0, r1, r2, c0, c1, c2)) = ref(s0, s1, s2, r0, r1, r2, c0, c1, c);


var n, n1: Nat;
	r, r1, r2, r3: Rail;
	b, b1, b2, b3, b4: Bool;
eqn
	init_cart(n, n1) = cart(n, rail(n1), rail(n1), rail(n1), true, false, false, false);
	
	get_id(cart(n, r1, r2, r3, b1, b2, b3, b4)) = n;
	
	get_rail(cart(n, r1, r2, r3, b1, b2, b3, b4)) = r1;
	set_rail(r, cart(n, r1, r2, r3, b1, b2, b3, b4)) = cart(n, r, r2, r3, b1, b2, b3, b4);
	
	get_next_rail(cart(n, r1, r2, r3, b1, b2, b3, b4)) = r2;
	set_next_rail(r, cart(n, r1, r2, r3, b1, b2, b3, b4)) = cart(n, r1, r, r3, b1, b2, b3, b4);
	
	get_target_rail(cart(n, r1, r2, r3, b1, b2, b3, b4)) = r3;
	set_target_rail(r, cart(n, r1, r2, r3, b1, b2, b3, b4)) = cart(n, r1, r2, r, b1, b2, b3, b4);
	
	is_empty(cart(n, r1, r2, r3, b1, b2, b3, b4)) = b1;
	set_empty(b, cart(n, r1, r2, r3, b1, b2, b3, b4)) = cart(n, r1, r2, r3, b, b2, b3, b4);
	
	is_down(cart(n, r1, r2, r3, b1, b2, b3, b4)) = b2;
	set_down(b, cart(n, r1, r2, r3, b1, b2, b3, b4)) = cart(n, r1, r2, r3, b1, b, b3, b4);
	
	get_requires_main(cart(n, r1, r2, r3, b1, b2, b3, b4)) = b3;
	set_requires_main(b, cart(n, r1, r2, r3, b1, b2, b3, b4)) = cart(n, r1, r2, r3, b1, b2, b, b4);
	
	get_receiving_main(cart(n, r1, r2, r3, b1, b2, b3, b4)) = b4;
	set_receiving_main(b, cart(n, r1, r2, r3, b1, b2, b3, b4)) = cart(n, r1, r2, r3, b1, b2, b3, b);


var c, c0, c1, c2, c3: Cart;
	r: Rail;
	n: Nat;
	b: Bool;
	cs: CartState;
eqn
	init_cart_state = cartState(
			init_cart(0, 0),
			init_cart(1, 3),
			init_cart(2, 5),
			init_cart(3, 7)
	);
	
	get_cart(0, cartState(c0, c1, c2, c3)) = c0;
	get_cart(1, cartState(c0, c1, c2, c3)) = c1;
	get_cart(2, cartState(c0, c1, c2, c3)) = c2;
	get_cart(3, cartState(c0, c1, c2, c3)) = c3;
	set_cart(0, c, cartState(c0, c1, c2, c3)) = cartState(c, c1, c2, c3);
	set_cart(1, c, cartState(c0, c1, c2, c3)) = cartState(c0, c, c2, c3);
	set_cart(2, c, cartState(c0, c1, c2, c3)) = cartState(c0, c1, c, c3);
	set_cart(3, c, cartState(c0, c1, c2, c3)) = cartState(c0, c1, c2, c);
	
	get_rail(n, cs) = get_rail(get_cart(n, cs));
	set_rail(n, r, cs) = set_cart(n, set_rail(r, get_cart(n, cs)), cs);
	
	is_empty(n, cs) = is_empty(get_cart(n, cs));
	set_empty(n, b, cs) = set_cart(n, set_empty(b, get_cart(n, cs)), cs);
	
	is_down(n, cs) = is_down(get_cart(n, cs));
	set_down(n, b, cs) = set_cart(n, set_down(b, get_cart(n, cs)), cs);

	get_requires_main(n, cs) = get_requires_main(get_cart(n, cs));
	set_requires_main(n, b, cs) = set_cart(n, set_requires_main(b, get_cart(n, cs)), cs);

	get_receiving_main(n, cs) = get_receiving_main(get_cart(n, cs));
	set_receiving_main(n, b, cs) = set_cart(n, set_receiving_main(b, get_cart(n, cs)), cs);


act
	%% Blast furnace.
	% External actions.
	furnaceDown, requestFurnaceMaintenance, furnaceUp;
	cartFull: Nat;
	pourFurnace: Bool;
	% Internal actions.
	fillCart, cartIsFull: Nat;
	
	
	%% Refinery.
	% External actions.
	refineryDown, requestRefineryMaintenance, refineryUp: Nat;
	unloadCart: Nat # Bool;
	cartEmpty: Nat;
	
	% Internal actions.
	pourCart;
	refACart, cartACart, aCart: Nat # Nat; % Refinery # Cart
	
	% Internal + external actions.
	
	%% Request actions.
	refRequestIron, cartRequestIron, requestIron: Nat;
	bufRefRequestIron, bufCartRequestIron, requestIronBuf: Nat;
	bufRequestDone, cartRequestDone, refRequestDone, requestDone: Nat;
	
	
	%% CartMover
	cartDown, requestEmergencyCartMaintenance, cartUp: Nat;
	cartRequestMaintenance, requestCartMaintenance, repairCart: Nat;
	tmp;


proc
	BlastFurnace(fs: Nat, c: Nat) =
			furnaceDown . requestFurnaceMaintenance . furnaceUp . BlastFurnace(fs, c) +
			(fs == 0) -> sum crt: Nat . (crt < 4) -> fillCart(crt) . BlastFurnace(1, crt) +
			(fs == 1) -> pourFurnace(true) . BlastFurnace(2, c) +
			(fs == 2) -> cartFull(c) . BlastFurnace(3, c) +
			(fs == 3) -> pourFurnace(false) . BlastFurnace(4, c) +
			(fs == 4) -> cartIsFull(c) . BlastFurnace(0, c);
	
	
	Refinery(rs: Ref) =
			sum n: Nat . (n < 3) -> (
				(get_error_state(n, rs) == 0) -> (
					refineryDown(n) . Refinery(set_error_state(n, 1, rs)) +
					(get_state(n, rs) == 0) -> refRequestIron(n) . Refinery(set_state(n, 1, rs)) +
					(get_state(n, rs) == 1) -> sum c: Nat . (c < 4) -> refACart(n, c) . Refinery(set_cart(n, c, set_state(n, 2, rs))) +
					(get_state(n, rs) == 2) -> unloadCart(get_cart(n, rs), true) . Refinery(set_state(n, 3, rs)) +
					(get_state(n, rs) == 3) -> cartEmpty(get_cart(n, rs)) . Refinery(set_state(n, 4, rs)) +
					(get_state(n, rs) == 4) -> unloadCart(get_cart(n, rs), false) . Refinery(set_state(n, 5, rs)) +
					(get_state(n, rs) == 5) -> refRequestDone(n) . Refinery(set_state(n, 0, rs))
				) +
				(get_error_state(n, rs) == 1) -> requestRefineryMaintenance(n) . Refinery(set_error_state(n, 2, rs)) +
				(get_error_state(n, rs) == 2) -> refineryUp(n) . Refinery(set_error_state(n, 0, rs))
			);
	
	
	RequestBuffer(req: List(Nat), done: Set(Nat)) =
			sum r: Nat . (r < 3) -> bufRefRequestIron(r) . RequestBuffer(req <| r, done) +
			(#req > 0) -> bufCartRequestIron(head(req)) . RequestBuffer(tail(req), done + {head(req)}) +
			sum r: Nat . (r < 3 && r in done) -> bufRequestDone(r) . RequestBuffer(req, done - {r});
	
	
	CartMover(cs: CartState, state: Nat) =
			sum c: Nat . (c < 4) -> (
				(!is_down(c, cs)) -> ( (!get_requires_main(c, cs))
					-> (cartRequestMaintenance(c) . CartMover(set_requires_main(c, true, cs), state))
					<> (!get_receiving_main(c, cs))
						-> ( (is_at_repair_bay(get_rail(c, cs))) -> (requestCartMaintenance(c) . CartMover(set_receiving_main(c, true, cs), state)) )
						<> repairCart(c) . CartMover(set_requires_main(c, false, set_receiving_main(c, false, cs)), state) ) +
				(!is_down(c, cs))
					-> ( (!get_receiving_main(c, cs)) -> (cartDown(c) . CartMover(set_down(c, true, cs), state)) )
					<> (!get_receiving_main(c, cs))
						-> (requestEmergencyCartMaintenance(c) . CartMover(set_receiving_main(c, true, cs), state))
						<> (cartUp(c) . CartMover(set_down(c, false, set_receiving_main(c, false, cs)), state))
			) + sum r: Nat . (r < 3) -> cartRequestIron(r) . CartMover(cs, state) +
			% TMP
			sum c: Nat . (c < 4) -> sum r: Nat . (r < 3) -> cartACart(r, c) . CartMover(cs, state) +
			sum r: Nat . (r < 3) -> cartRequestDone(r) . CartMover(cs, state);
	
	MoveCartToTarget(c: Cart, cs: CartState) = tmp;

init
	allow({ aCart, requestIron, requestIronBuf, requestDone, unloadCart, cartEmpty,
			refineryDown, requestRefineryMaintenance, refineryUp,
			cartDown, requestEmergencyCartMaintenance, cartUp,
			cartRequestMaintenance, requestCartMaintenance, repairCart,
			furnaceDown, requestFurnaceMaintenance, furnaceUp },
		comm({
				refACart | cartACart -> aCart,
				refRequestIron | bufRefRequestIron -> requestIron,
				cartRequestIron | bufCartRequestIron -> requestIronBuf,
				cartRequestDone | refRequestDone | bufRequestDone -> requestDone
			},
			BlastFurnace(0, 0) || Refinery(init_ref_state) || RequestBuffer([], {}) || CartMover(init_cart_state, 0)
		)
	);





